{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nexport function call(api, method, request) {\n  let options = {\n    headers: new Headers({\n      \"Content-Type\": \"application/json\"\n    }),\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      // response.ok가 true면 정상적인 응답을 받은 것이고 아니면 에러 응답을 받은 것임\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    console.log(error.status);\n\n    if (error.status === 403) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(\"ACCESS_TOKEN\", response.token); // token이 존재하면 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n    }\n  });\n}","map":{"version":3,"sources":["D:/react-workspace/todo-react-app/src/service/ApiService.js"],"names":["API_BASE_URL","call","api","method","request","options","headers","Headers","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","console","log","status","window","location","href","signin","userDTO","token","localStorage","setItem"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACvC,MAAIC,OAAO,GAAG;AACVC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACjB,sBAAgB;AADC,KAAZ,CADC;AAIVC,IAAAA,GAAG,EAAER,YAAY,GAAGE,GAJV;AAKVC,IAAAA,MAAM,EAAEA;AALE,GAAd;;AAOA,MAAIC,OAAJ,EAAa;AACT;AACAC,IAAAA,OAAO,CAACI,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAAf;AACH;;AACD,SAAOQ,KAAK,CAACP,OAAO,CAACG,GAAT,EAAcH,OAAd,CAAL,CAA4BQ,IAA5B,CAAkCC,QAAD,IACpCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC3B,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACH;;AACD,WAAOA,IAAP;AACH,GAND,CADG,EASNI,KATM,CASCC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;;AACA,QAAGH,KAAK,CAACG,MAAN,KAAiB,GAApB,EAAwB;AACpBC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CADoB,CACa;AACpC;;AACD,WAAOT,OAAO,CAACC,MAAR,CAAeE,KAAf,CAAP;AACH,GAfM,CAAP;AAgBH;AAED,OAAO,SAASO,MAAT,CAAgBC,OAAhB,EAAwB;AAC3B,SAAO3B,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyB2B,OAAzB,CAAJ,CACNf,IADM,CACAC,QAAD,IAAc;AAChB,QAAGA,QAAQ,CAACe,KAAZ,EAAkB;AACd;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCjB,QAAQ,CAACe,KAA9C,EAFc,CAGd;;AACAL,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,GARM,CAAP;AASH","sourcesContent":["import { API_BASE_URL } from \"../app-config\";\r\n\r\nexport function call(api, method, request) {\r\n    let options = {\r\n        headers: new Headers({\r\n            \"Content-Type\": \"application/json\",\r\n        }),\r\n        url: API_BASE_URL + api,\r\n        method: method,\r\n    };\r\n    if (request) {\r\n        // GET method\r\n        options.body = JSON.stringify(request);\r\n    }\r\n    return fetch(options.url, options).then((response) =>\r\n        response.json().then((json) => {\r\n            if (!response.ok) {\r\n                // response.ok가 true면 정상적인 응답을 받은 것이고 아니면 에러 응답을 받은 것임\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    )\r\n    .catch((error) => {\r\n        console.log(error.status);\r\n        if(error.status === 403){\r\n            window.location.href = \"/login\"; // redirect\r\n        }\r\n        return Promise.reject(error);\r\n    });\r\n}\r\n\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\", \"POST\", userDTO)\r\n    .then((response) => {\r\n        if(response.token){\r\n            // 로컬 스토리지에 토큰 저장\r\n            localStorage.setItem(\"ACCESS_TOKEN\", response.token);\r\n            // token이 존재하면 Todo 화면으로 리디렉트\r\n            window.location.href = \"/\";\r\n        }  \r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}