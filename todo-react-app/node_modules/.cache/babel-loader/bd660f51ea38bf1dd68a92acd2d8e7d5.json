{"ast":null,"code":"import { API_BASE_URL } from \"../app-config\";\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\nexport function call(api, method, request) {\n  let headers = new Headers({\n    \"Content-Type\": \"application/json\"\n  });\n  const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\n\n  if (accessToken && accessToken !== null) {\n    headers.append(\"Authorization\", \"Bearer \" + accessToken);\n  }\n\n  let options = {\n    headers: headers,\n    url: API_BASE_URL + api,\n    method: method\n  };\n\n  if (request) {\n    // GET method\n    options.body = JSON.stringify(request);\n  }\n\n  return fetch(options.url, options).then(response => response.json().then(json => {\n    if (!response.ok) {\n      // response.ok가 true면 정상적인 응답을 받은 것이고 아니면 에러 응답을 받은 것임\n      return Promise.reject(json);\n    }\n\n    return json;\n  })).catch(error => {\n    console.log(error.status);\n\n    if (error.status === undefined) {\n      window.location.href = \"/login\"; // redirect\n    }\n\n    return Promise.reject(error);\n  });\n}\nexport function signin(userDTO) {\n  return call(\"/auth/signin\", \"POST\", userDTO).then(response => {\n    if (response.token) {\n      // 로컬 스토리지에 토큰 저장\n      localStorage.setItem(ACCESS_TOKEN, response.token); // token이 존재하면 Todo 화면으로 리디렉트\n\n      window.location.href = \"/\";\n    }\n  });\n}\nexport function signout() {\n  localStorage.setItem(ACCESS_TOKEN, null);\n  window.location.href = \"/login\";\n}\nexport function signup(userDTO) {\n  return call(\"/auth/signup\", \"POST\", userDTO);\n}","map":{"version":3,"sources":["D:/react-workspace/todo-react-app/src/service/ApiService.js"],"names":["API_BASE_URL","ACCESS_TOKEN","call","api","method","request","headers","Headers","accessToken","localStorage","getItem","append","options","url","body","JSON","stringify","fetch","then","response","json","ok","Promise","reject","catch","error","console","log","status","undefined","window","location","href","signin","userDTO","token","setItem","signout","signup"],"mappings":"AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,MAAMC,YAAY,GAAG,cAArB;AAEA,OAAO,SAASC,IAAT,CAAcC,GAAd,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AACvC,MAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAY;AACtB,oBAAgB;AADM,GAAZ,CAAd;AAIA,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAApB;;AACA,MAAIF,WAAW,IAAIA,WAAW,KAAK,IAAnC,EAAwC;AACpCF,IAAAA,OAAO,CAACK,MAAR,CAAe,eAAf,EAAgC,YAAYH,WAA5C;AACH;;AACD,MAAII,OAAO,GAAG;AACVN,IAAAA,OAAO,EAAEA,OADC;AAEVO,IAAAA,GAAG,EAAEb,YAAY,GAAGG,GAFV;AAGVC,IAAAA,MAAM,EAAEA;AAHE,GAAd;;AAKA,MAAIC,OAAJ,EAAa;AACT;AACAO,IAAAA,OAAO,CAACE,IAAR,GAAeC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAAf;AACH;;AACD,SAAOY,KAAK,CAACL,OAAO,CAACC,GAAT,EAAcD,OAAd,CAAL,CAA4BM,IAA5B,CAAkCC,QAAD,IACpCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAsBE,IAAD,IAAU;AAC3B,QAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;AACd;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeH,IAAf,CAAP;AACH;;AACD,WAAOA,IAAP;AACH,GAND,CADG,EASNI,KATM,CASCC,KAAD,IAAW;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAlB;;AACA,QAAGH,KAAK,CAACG,MAAN,KAAiBC,SAApB,EAA8B;AAC1BC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CAD0B,CACO;AACpC;;AACD,WAAOV,OAAO,CAACC,MAAR,CAAeE,KAAf,CAAP;AACH,GAfM,CAAP;AAgBH;AAED,OAAO,SAASQ,MAAT,CAAgBC,OAAhB,EAAwB;AAC3B,SAAOhC,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyBgC,OAAzB,CAAJ,CACNhB,IADM,CACAC,QAAD,IAAc;AAChB,QAAGA,QAAQ,CAACgB,KAAZ,EAAkB;AACd;AACA1B,MAAAA,YAAY,CAAC2B,OAAb,CAAqBnC,YAArB,EAAmCkB,QAAQ,CAACgB,KAA5C,EAFc,CAGd;;AACAL,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACH;AACJ,GARM,CAAP;AASH;AAED,OAAO,SAASK,OAAT,GAAkB;AACrB5B,EAAAA,YAAY,CAAC2B,OAAb,CAAqBnC,YAArB,EAAmC,IAAnC;AACA6B,EAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB;AACH;AAED,OAAO,SAASM,MAAT,CAAgBJ,OAAhB,EAAwB;AAC3B,SAAOhC,IAAI,CAAC,cAAD,EAAiB,MAAjB,EAAyBgC,OAAzB,CAAX;AACH","sourcesContent":["import { API_BASE_URL } from \"../app-config\";\r\nconst ACCESS_TOKEN = \"ACCESS_TOKEN\";\r\n\r\nexport function call(api, method, request) {\r\n    let headers = new Headers({\r\n        \"Content-Type\": \"application/json\",\r\n    });\r\n\r\n    const accessToken = localStorage.getItem(\"ACCESS_TOKEN\");\r\n    if (accessToken && accessToken !== null){\r\n        headers.append(\"Authorization\", \"Bearer \" + accessToken);\r\n    }\r\n    let options = {\r\n        headers: headers,\r\n        url: API_BASE_URL + api,\r\n        method: method,\r\n    };\r\n    if (request) {\r\n        // GET method\r\n        options.body = JSON.stringify(request);\r\n    }\r\n    return fetch(options.url, options).then((response) =>\r\n        response.json().then((json) => {\r\n            if (!response.ok) {\r\n                // response.ok가 true면 정상적인 응답을 받은 것이고 아니면 에러 응답을 받은 것임\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    )\r\n    .catch((error) => {\r\n        console.log(error.status);\r\n        if(error.status === undefined){\r\n            window.location.href = \"/login\"; // redirect\r\n        }\r\n        return Promise.reject(error);\r\n    });\r\n}\r\n\r\nexport function signin(userDTO){\r\n    return call(\"/auth/signin\", \"POST\", userDTO)\r\n    .then((response) => {\r\n        if(response.token){\r\n            // 로컬 스토리지에 토큰 저장\r\n            localStorage.setItem(ACCESS_TOKEN, response.token);\r\n            // token이 존재하면 Todo 화면으로 리디렉트\r\n            window.location.href = \"/\";\r\n        }  \r\n    })\r\n}\r\n\r\nexport function signout(){\r\n    localStorage.setItem(ACCESS_TOKEN, null);\r\n    window.location.href = \"/login\";\r\n}\r\n\r\nexport function signup(userDTO){\r\n    return call(\"/auth/signup\", \"POST\", userDTO);\r\n}"]},"metadata":{},"sourceType":"module"}