{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-workspace\\\\todo-react-app\\\\src\\\\App.js\";\nimport React from \"react\";\nimport Todo from './Todo';\nimport AddTodo from './AddTodo.js';\nimport { Paper, List, Container, Grid, Button, AppBar, Toolbar, Typography } from \"@material-ui/core\";\nimport './App.css';\nimport { call, signout } from \"./ApiService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.add = item => {\n      call(\"/todo\", \"POST\", item).then(response => this.setState({\n        items: response.data\n      }));\n    };\n\n    this.delete = item => {\n      call(\"/todo\", \"DELETE\", item).then(response => this.setState({\n        items: response.data\n      }));\n    };\n\n    this.update = item => {\n      call(\"/todo\", \"PUT\", item).then(response => this.setState({\n        items: response.data\n      }));\n    };\n\n    this.state = {\n      items: [],\n\n      /* 로딩 중이라는 상태를 표현할 변수\n       생성자에 상태 변수를 추가한다 */\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    /* componentDidMount에서 Todo 리스트를 가져오는\n    GET 요청이 성공적으로 리턴하는 경우 loading을 false로 고친다.\n    더 이상 로딩 중이 아니라는 뜻이다. */\n    call(\"/todo\", \"GET\", null).then(response => this.setState({\n      items: response.data,\n      loading: false\n    }));\n  } // (1) 함수 추가\n\n\n  render() {\n    var todoItems = this.state.items.length > 0 &&\n    /*#__PURE__*/\n    // JSX의 조건부 랜더링\n    _jsxDEV(Paper, {\n      style: {\n        margin: 16\n      },\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: this.state.items.map((item, idx) => /*#__PURE__*/_jsxDEV(Todo, {\n          item: item,\n          delete: this.delete,\n          update: this.update\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this); // navigationBar 추가\n\n\n    var navigationBar = /*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          justifyContent: \"space-between\",\n          container: true,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: \"\\uC624\\uB298\\uC758 \\uD560\\uC77C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"inherit\",\n              onClick: signout,\n              children: \"\\uB85C\\uADF8\\uC544\\uC6C3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this); // 로딩 중이 아닐 때 랜더링할 부분 \n\n\n    var todoListPage = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [navigationBar, /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: [/*#__PURE__*/_jsxDEV(AddTodo, {\n          add: this.add\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TodoList\",\n          children: todoItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this); // 로딩 중일 때 랜더링할 부분\n\n\n    var loadingPage = /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" \\uB85C\\uB529\\uC911... \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 23\n    }, this); // 보여줄 부분 정하기\n\n\n    var content = loadingPage;\n\n    if (!this.state.loading) {\n      // 로딩 중이 아니라면 todoListPage를 선택\n      content = todoListPage;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/react-workspace/todo-react-app/src/App.js"],"names":["React","Todo","AddTodo","Paper","List","Container","Grid","Button","AppBar","Toolbar","Typography","call","signout","App","Component","constructor","props","add","item","then","response","setState","items","data","delete","update","state","loading","componentDidMount","render","todoItems","length","margin","map","idx","id","navigationBar","todoListPage","loadingPage","content"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Todo from './Todo';\nimport AddTodo from './AddTodo.js'\nimport { Paper, List, Container, Grid, Button,\n        AppBar, Toolbar, Typography} from \"@material-ui/core\";\nimport './App.css';\nimport { call, signout } from \"./ApiService\";\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items : [],\n      /* 로딩 중이라는 상태를 표현할 변수\n       생성자에 상태 변수를 추가한다 */\n      loading: true,\n    };\n  }\n  \n  componentDidMount() {\n    /* componentDidMount에서 Todo 리스트를 가져오는\n    GET 요청이 성공적으로 리턴하는 경우 loading을 false로 고친다.\n    더 이상 로딩 중이 아니라는 뜻이다. */\n    call(\"/todo\", \"GET\", null).then((response) =>\n      this.setState({ items: response.data, loading: false })\n    );\n  }\n      \n  // (1) 함수 추가\n  add = (item) => {\n    call(\"/todo\", \"POST\", item).then((response) =>\n      this.setState({ items: response.data })\n    );\n  }\n  \n  // (1) 함수 추가\n  delete =(item) => {\n    call(\"/todo\", \"DELETE\", item).then((response) =>\n      this.setState({ items: response.data })\n    );\n  }\n\n  // (1) 함수 추가\n  update = (item) => {\n    call(\"/todo\", \"PUT\", item).then((response) =>\n      this.setState({ items: response.data })\n    );\n  }\n\n  render(){\n    var todoItems = this.state.items.length > 0 && (    // JSX의 조건부 랜더링\n      <Paper style={{ margin: 16 }}>\n        <List>\n          {this.state.items.map((item, idx) => (\n            <Todo item={item} key={item.id} delete={this.delete} update={this.update}/>\n          ))}\n        </List>\n      </Paper>\n    );\n\n    // navigationBar 추가\n    var navigationBar = (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Grid justifyContent=\"space-between\" container>\n            <Grid item>\n              <Typography variant=\"h6\">오늘의 할일</Typography>\n            </Grid>\n            <Grid>\n              <Button color=\"inherit\" onClick={signout}>\n                로그아웃\n              </Button>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    );\n\n    // 로딩 중이 아닐 때 랜더링할 부분 \n    var todoListPage = (\n      <div>\n        {navigationBar}\n        <Container maxWidth=\"md\">\n        <AddTodo add={this.add} />\n        <div className=\"TodoList\">{todoItems}</div>\n      </Container>\n      </div>\n    );\n    // 로딩 중일 때 랜더링할 부분\n    var loadingPage = <h1> 로딩중... </h1>\n    \n    // 보여줄 부분 정하기\n    var content = loadingPage;\n    \n    if(!this.state.loading){\n      // 로딩 중이 아니라면 todoListPage를 선택\n      content = todoListPage;\n    }\n    return (\n    <div className=\"App\">\n      {content}\n    </div>);\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}